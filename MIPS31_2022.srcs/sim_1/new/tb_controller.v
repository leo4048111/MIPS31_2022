`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 05/19/2022 04:45:09 PM
// Design Name: 
// Module Name: tb_controller
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module tb_controller;
reg clk = 0;
reg ena = 1;
reg rst = 0;
reg [31:0] IM_Inst;  //从IMEM读出的指令
wire [31:0] PC;  //PC寄存器，储存下一条指令在IM中的地址
//DMEM操作控制信号
wire DM_W; 
wire DM_R;
reg [31:0] DM_ReadData;
wire [31:0] DM_WriteData;
wire [10:0] DM_Addr;

Controller uut(
    .clk(clk),
    .ena(ena),
    .rst(rst),
    .IM_Inst(IM_Inst),
    .PC(PC),
    .DM_W(DM_W),
    .DM_R(DM_R),
    .DM_ReadData(DM_ReadData),
    .DM_WriteData(DM_WriteData),
    .DM_Addr(DM_Addr)
    );

always #10 clk = ~clk;

initial begin
    #100 rst = 1;   //重置控制器
    #10 rst = 0;
    //-------------------------R型指令-------------------------------
    #10 IM_Inst = 32'b000000_00000_00001_00010_00000_100000;          //测试add指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000000_00000_00001_00010_00000_100001;          //测试addu指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000000_00000_00001_00010_00000_100010;          //测试sub指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000000_00000_00001_00010_00000_100011;          //测试subu指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000000_00000_00001_00010_00000_100100;          //测试and指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000000_00000_00001_00010_00000_100101;          //测试or指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000000_00000_00001_00010_00000_100110;          //测试xor指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000000_00000_00001_00010_00000_100111;          //测试nor指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000000_00000_00001_00010_00000_101010;          //测试slt指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000000_00000_00001_00010_00000_101011;          //测试sltu指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000000_00000_00001_00010_00100_000000;          //测试sll指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000000_00000_00001_00010_00011_000010;          //测试srl指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000000_00000_00001_00010_00110_000011;          //测试sra指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000000_00010_00001_00011_00000_000100;          //测试sllv指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000000_00010_00001_00011_00000_000110;          //测试srlv指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000000_00010_00001_00011_00000_000111;          //测试srav指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000000_00100_00000_00000_00000_001000;          //测试jr指令
    #10 rst = 1; #10 rst = 0;
    //-------------------------I型指令-------------------------------
    #10 IM_Inst = 32'b001000_00101_00110_1111111111111111;          //测试ADDI指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b001001_00101_00110_1111111111111111;          //测试ADDIU指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b001100_00101_00110_1111111111111111;          //测试ANDIU指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b001101_00101_00110_1111111111111111;          //测试ORI指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b001110_00101_00110_1111111111111111;          //测试XORI指令
    #10 rst = 1; #10 rst = 0;
    //-------------------------跳过LW SW--------------------------------
    #10 IM_Inst = 32'b000100_00111_01000_1111111111111101;          //测试BEQ指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000101_00111_01000_1111111111111101;          //测试BNE指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b001010_00111_01000_1111111111111101;          //测试SLTI指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b001011_00111_01000_1111111111111101;          //测试SLTIU指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b001111_00000_01001_1011001110101001;          //测试lui指令
    #10 rst = 1; #10 rst = 0;
    //-------------------------J型指令-------------------------------
    #10 IM_Inst = 32'b000010_11111111111111111111111111;          //测试j指令
    #10 rst = 1; #10 rst = 0;
    #10 IM_Inst = 32'b000011_11111111111111111111111111;          //测试jal指令
    #10 rst = 1; #10 rst = 0;
end

endmodule
